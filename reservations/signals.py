import logging
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse
from .models import Reservation 

logger = logging.getLogger(__name__)

try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'requests' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install requests")

@receiver(post_save, sender=Reservation)
def notify_new_reservation(sender, instance: Reservation, created: bool, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    if not created or not instance.id:
        return

    if not REQUESTS_AVAILABLE:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'requests' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        telegram_token = getattr(settings, 'TELEGRAM_BOT_API_KEY', None)
        chat_id = getattr(settings, 'TELEGRAM_USER_ID', None)
        
        if not telegram_token or not chat_id:
            logger.error("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ settings.py!")
            return

        base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
        admin_url = reverse('admin:reservations_reservation_change', args=[instance.id])
        full_url = f"{base_url}{admin_url}"

        message = (
            "üìÖ *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n"
            f"üîñ *ID:* {instance.id}\n"
            f"üçΩ *–°—Ç–æ–ª–∏–∫ ‚Ññ:* {instance.table.number}\n"
            f"üë• *–ì–æ—Å—Ç–µ–π:* {instance.guests}\n"
            f"üë§ *–ò–º—è:* {instance.customer_name}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{instance.customer_phone}`\n"
            f"‚úâÔ∏è *Email:* {instance.customer_email}\n"
            f"‚è∞ *–î–∞—Ç–∞/–≤—Ä–µ–º—è:* {instance.date.strftime('%d.%m.%Y')} {instance.time.strftime('%H:%M')}\n"
            f"‚è≥ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {instance.duration} —á.\n"
            f"üìù *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* {instance.special_requests or '–Ω–µ—Ç'}\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –≤ –∞–¥–º–∏–Ω–∫—É]({full_url})"
        )

        response = requests.post(
            f"https://api.telegram.org/bot{telegram_token}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "disable_web_page_preview": True
            },
            timeout=10
        )

        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ #{instance.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)